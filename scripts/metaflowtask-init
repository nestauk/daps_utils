#!/usr/bin/env bash

set -e
export BIGCOMMENT='################################################################'

function DUtilsBaseDir(){
    DU_BASEDIR=$(python -c "import daps_utils; print(daps_utils.__basedir__)")
    echo -n $DU_BASEDIR
}

function CreateConfig(){
    mkdir -p ${2}/metaflowtask &> /dev/null
    cp $(DUtilsBaseDir)/config/metaflowtask/* ${2}/metaflowtask/
    echo "${1}/${2}/metaflowtask/ has been created or updated, with a Dockerfile, Dockerfile-base and launch.sh"
}

function CreateFlowsDir(){
    EXAMPLE_DIR=flows/examples/s3_example
    mkdir -p ${EXAMPLE_DIR} &> /dev/null
    cp $(DUtilsBaseDir)/${EXAMPLE_DIR}/s3_example.py ${EXAMPLE_DIR}/
    echo "${1}/flows/example/ has been created or updated, with an example flow."
}

function CheckAndCreate(){
    touch ${2}
    # Don't append text if it already exists
    DU_MSG="### Text automatically added by daps-utils metaflowtask-init ###"
    if grep -Fxq "${DU_MSG}" ${2} &> /dev/null
    then
	echo -e "\nWARNING: not copying or editing ${1}/${2} as 'metaflowtask-init' has already been called. Manually\
 remove previous edit by metaflowtask-init (i.e. the text between the long comment blocks), and then try again.\n" >&2
	exit 1
    fi
    echo ${BIGCOMMENT} >> ${2}
    echo ${DU_MSG} >> ${2}
}

function AddRequirements(){
    touch requirements.txt
    echo "Added ${1}/requirements.txt. Is is empty by default, but you can set 'global' flow requirements here."
}

function CopyInitPlus(){
    # Create __init__
    CheckAndCreate ${1} __init__.py
    echo 'from .__initplus__ import load_current_version, __basedir__, load_config' >> __init__.py
    echo 'try' >> __init__.py
    echo '    config = load_config()' >> __init__.py
    echo 'except ModuleNotFoundError as exc:' >> __init__.py
    echo '    print(exc)' >> __init__.py
    echo '__version__ = load_current_version()' >> __init__.py
    echo ${BIGCOMMENT} >> __init__.py
    
    # Create __initplus__
    cp $(DUtilsBaseDir)/__initplus__.py .

    # Done
    echo "${1}/__init__.py and ${1}/__initplus__.py have been created or updated."
}


# Navigate to the specified directory
DU_LOCAL_REPO_NAME=${1%/}
if [ "$#" -ne 1 ] || ! [ -d "$DU_LOCAL_REPO_NAME" ]; then
  echo "Usage: $0 LOCAL_REPO_NAME" >&2
  exit 1
fi
# Set up calendar versioning
calver-init
# Check it all adds up
if [ "${PWD##*/}" != "${DU_LOCAL_REPO_NAME}" ]; then
    echo "ERROR: Your repository and package must have the same name, i.e. '$DU_LOCAL_REPO_NAME/$DU_LOCAL_REPO_NAME' does not exist, where '$DU_LOCAL_REPO_NAME' should be the name of this local directory, not '${PWD##*/}'." >&2
    exit 1
fi
# Set up MetaflowTask structure
cd ${DU_LOCAL_REPO_NAME}
CreateConfig ${DU_LOCAL_REPO_NAME} config
CreateConfig ${DU_LOCAL_REPO_NAME} config/actions-config
CreateFlowsDir ${DU_LOCAL_REPO_NAME}
CopyInitPlus ${DU_LOCAL_REPO_NAME}
AddRequirements ${DU_LOCAL_REPO_NAME}
